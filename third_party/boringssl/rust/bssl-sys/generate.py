#!/usr/bin/env fuchsia-vendored-python
#
# Copyright 2025 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import sys
from pathlib import Path

# Add //build/rust to Python path so the bindgen import works.
FUCHSIA_DIR = Path(__file__).parent.parent.parent.parent.parent
sys.path.append(str(FUCHSIA_DIR / "build" / "rust"))

from bindgen import Bindgen

# The directory in fuchsia.git providing build support to the nested checkout
# of the boringssl.git mirror.
BORINGSSL_PLATFORM_DIR = FUCHSIA_DIR / "third_party" / "boringssl"
BORINGSSL_MIRROR_DIR = BORINGSSL_PLATFORM_DIR / "src"

INPUT_FILE = BORINGSSL_MIRROR_DIR / "rust" / "bssl-sys" / "wrapper.h"
OUTPUT_FILE = BORINGSSL_PLATFORM_DIR / "rust" / "bssl-sys" / "bindgen.rs"
BORINGSSL_INCLUDE_DIR = BORINGSSL_MIRROR_DIR / "include"

RELATIVE_SCRIPT_PATH = Path(__file__).relative_to(FUCHSIA_DIR)
RAW_LINES = f"""
// This file is automatically generated by //{RELATIVE_SCRIPT_PATH}.
"""


bindgen = Bindgen()
bindgen.raw_lines = RAW_LINES

# The output gets `include!`d in the bssl-sys crate root, so we are unable to
# generate `#![allow(...)]` directives.
bindgen.generate_allows = False

# The remaining options mirror what's specified in
# //third_party/boringssl/src/rust/bssl-sys/CMakeLists.txt
bindgen.include_dirs = [ BORINGSSL_INCLUDE_DIR ]
bindgen.use_core = True
bindgen.additional_bindgen_flags = [
    "--no-derive-default",
    "--enable-function-attribute-detection",
    "--default-macro-constant-type=signed",
    "--rustified-enum=point_conversion_form_t",
]

bindgen.run(str(INPUT_FILE), str(OUTPUT_FILE))
