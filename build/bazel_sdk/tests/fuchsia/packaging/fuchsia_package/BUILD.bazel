# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("@fuchsia_sdk//fuchsia:defs.bzl", "get_fuchsia_api_levels")
load(":fuchsia_package_checker_test.bzl", "fuchsia_package_checker_test")
load("//test_utils:api_levels.bzl", "some_valid_numerical_api_level_as_string")

NUMERICAL_LEVEL_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    if level.api_level == some_valid_numerical_api_level_as_string()
][0]

NEXT_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    if level.api_level == "NEXT"
][0]

HEAD_ABI_REVISION = [
    level.abi_revision
    for level in get_fuchsia_api_levels()
    if level.api_level == "HEAD"
][0]

# Values used in tests of `pkg_for_test` and variantes for different levels.
EXPECTED_BLOBS_IN_PKG = {
    "bin/cc_bin": "cc_bin_native_stripped",
    "data/text_file.txt": "text_file.txt",

    # Common files that should automatically be added

    # From SDK sysroot
    "lib/ld.so.1": "ld.so.1",

    # From Clang toolchain runtimes
    "lib/libc++.so.2": "libc++.so.2",
    "lib/libc++abi.so.1": "libc++abi.so.1",
    "lib/libunwind.so.1": "libunwind.so.1",
    "lib/libfdio.so": "libfdio.so",
}

MANIFESTS_FOR_PKG = [
    "meta/cc_component.cm",
    "meta/empty_component.cm",
]

STRUCTURED_CONFIG_FILES = [
    "meta/cc_component.cvf",
]

# TODO(https://fxbug.dev/354047162): Remove these two when no longer needed.
EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT = {
    "data/text_file.txt": "text_file.txt",
}

MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT = [
    "meta/empty_component.cm",
]

test_suite(
    name = "tests",

    # Tests are listed in the order they are defined.
    # buildifier: leave-alone, do not sort
    tests = [
        ":cc_pkg_test",
        ":cc_pkg_with_static_cpp_test",
        ":cc_test_pkg_test",
        ":cc_unittest_pkg_test",
        ":subpkg_test",
        ":cc_driver_pkg_test",
        ":cc_driver_pkg_with_tool_test",
        ":cc_pkg_at_numerical_api_level_test",
        ":cc_pkg_at_next_test",
    ],
    visibility = ["//visibility:public"],
)

# Also serves the purpose of "cc_test_pkg_at_head".
fuchsia_package_checker_test(
    name = "cc_pkg_test",
    package_name = "pkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG,
    manifests = MANIFESTS_FOR_PKG,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)

fuchsia_package_checker_test(
    name = "cc_pkg_with_static_cpp_test",
    package_name = "pkg_with_static_cpp_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        "bin/cc_bin_static_cpp": "cc_bin_static_cpp_native_stripped",

        # Common files that should automatically be added

        # From SDK sysroot
        "lib/ld.so.1": "ld.so.1",

        # From Clang toolchain runtimes
        "lib/libfdio.so": "libfdio.so",
    },
    manifests = [
        "meta/cc_component.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_with_static_cpp",
)

fuchsia_package_checker_test(
    name = "cc_test_pkg_test",
    package_name = "test_pkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        "bin/cc_test": "cc_test_native_stripped",
        "data/text_file.txt": "text_file.txt",

        # Common files that should automatically be added

        # From SDK sysroot
        "lib/ld.so.1": "ld.so.1",

        # From Clang toolchain runtimes
        "lib/libc++.so.2": "libc++.so.2",
        "lib/libc++abi.so.1": "libc++abi.so.1",
        "lib/libunwind.so.1": "libunwind.so.1",
        "lib/libfdio.so": "libfdio.so",
    },
    manifests = [
        # The test component
        "meta/cc_test.cm",
        # The included component
        "meta/empty_component.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:test_pkg",
)

fuchsia_package_checker_test(
    name = "cc_unittest_pkg_test",
    package_name = "unittest_pkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        "bin/cc_unit_test": "cc_unit_test_native_stripped",
        # Common files that should automatically be added

        # From SDK sysroot
        "lib/ld.so.1": "ld.so.1",

        # From Clang toolchain runtimes
        "lib/libc++.so.2": "libc++.so.2",
        "lib/libc++abi.so.1": "libc++abi.so.1",
        "lib/libunwind.so.1": "libunwind.so.1",
        "lib/libfdio.so": "libfdio.so",
    },
    manifests = [
        "meta/cc_unit_test.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:unittest_pkg",
)

fuchsia_package_checker_test(
    name = "subpkg_test",
    package_name = "pkg_with_subpkg_for_test",
    size = "small",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {},
    expected_subpackages = ["pkg_for_test"],
    manifests = ["meta/empty_component.cm"],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_with_subpkg",
)

fuchsia_package_checker_test(
    name = "cc_driver_pkg_test",
    package_name = "test_driver",
    size = "small",
    bind_bytecode = "meta/bind/test_driver.bindbc",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        # The driver binary
        "driver/test_driver_so.so": "test_driver_so.so_stripped",

        # Common files
        "lib/ld.so.1": "ld.so.1",
        "lib/libfdio.so": "libfdio.so",
        "lib/libsvc.so": "libsvc.so",
        "lib/libtrace-engine.so": "libtrace-engine.so",
        "lib/libdriver_runtime.so": "libdriver_runtime.so",
    },
    manifests = [
        "meta/test_driver.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_driver:pkg",
    structured_config_files = [
        "meta/test_driver.cvf",
    ],
)

fuchsia_package_checker_test(
    name = "cc_driver_pkg_with_tool_test",
    package_name = "test_driver_with_tool",
    size = "small",
    bind_bytecode = "meta/bind/test_driver.bindbc",
    expected_abi_revision = HEAD_ABI_REVISION,
    expected_blobs_to_file_names = {
        # The driver binary
        "driver/test_driver_so.so": "test_driver_so.so_stripped",

        # The driver tool
        "bin/ctl": "ctl_native_stripped",

        # Common files
        "lib/ld.so.1": "ld.so.1",
        "lib/libfdio.so": "libfdio.so",
        "lib/libsvc.so": "libsvc.so",
        "lib/libtrace-engine.so": "libtrace-engine.so",
        "lib/libdriver_runtime.so": "libdriver_runtime.so",

        # The following files are needed by the tool, make sure they are included
        "lib/libc++.so.2": "libc++.so.2",
        "lib/libc++abi.so.1": "libc++abi.so.1",
        "lib/libunwind.so.1": "libunwind.so.1",
    },
    manifests = [
        "meta/test_driver.cm",
    ],
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_driver:pkg_with_tool",
    structured_config_files = [
        "meta/test_driver.cvf",
    ],
)

fuchsia_package_checker_test(
    name = "cc_pkg_at_numerical_api_level_test",

    # With ":cc_component", this test would fail if artifacts for the API level
    # returned by `some_valid_numerical_api_level_as_string() have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    package_name = "pkg_at_numerical_api_level_without_cc_component_for_test",
    size = "small",
    expected_abi_revision = NUMERICAL_LEVEL_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_numerical_api_level_without_cc_component",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)

fuchsia_package_checker_test(
    name = "cc_pkg_at_next_test",

    # With ":cc_component", this test would fail if artifacts for "NEXT" have not been built.
    # TODO(https://fxbug.dev/382560521): Only run this test when that is the
    # case and remove `_without_cc_component`/`_WITHOUT_CC_COMPONENT` below.
    package_name = "pkg_at_next_api_level_without_cc_component_for_test",
    size = "small",
    expected_abi_revision = NEXT_ABI_REVISION,
    expected_blobs_to_file_names = EXPECTED_BLOBS_IN_PKG_WITHOUT_CC_COMPONENT,
    manifests = MANIFESTS_FOR_PKG_WITHOUT_CC_COMPONENT,
    package_under_test = "//fuchsia/packaging/fuchsia_package/cc_component:pkg_at_next_api_level_without_cc_component",
    structured_config_files = STRUCTURED_CONFIG_FILES,
)
