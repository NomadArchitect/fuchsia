# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file demonstrates how it is possible to invoke bazel_build_action()
# early in the GN graph *without* having built the full IDK atoms with Ninja.
#
# This relies on the use of `no_sdk_workspace = true`, which ensures that
# this is run in a Bazel workspace setup with special empty versions of
# @fuchsia_sdk and @fuchsia_clang, and which sets the default platform
# to match the host system.
#
# It is not possible to use SDK rules or generate Fuchsia binaries in this
# mode, which is why the following action builds a *host* executable even
# though it is invoked from the default Fuchsia toolchain.
#
# To demonstrate this, do the following:
#
#  ```sh
#  fx set core.arm64 --with //build/bazel/examples/hello_world
#  fx clean
#  fx gen
#  fx build //build/bazel/examples/hello_world
#  out/default/obj/build/bazel/examples/hello_world/hello_world  # Run it!
#  ```
# The build command takes about 7 seconds on a powerful workstation,
# which includes the time to setup the Bazel workspace, invoke Bazel
# and copy the output to the Ninja build directory.
#
# `no_sdk_workspace` is also supported by bazel_build_group(), and this
# special mode will be used to build host tools directly with Bazel in
# the near future.
#

import("//build/bazel/bazel_build_action.gni")

bazel_build_action("hello_world") {
  bazel_target = ":hello_world"
  copy_outputs = [
    {
      bazel = "{{BAZEL_TARGET_OUT_DIR}}/hello_world"
      ninja = "hello_world"
    },
  ]

  # Ensure Bazel can be invoked before setting up the IDK/SDK
  no_sdk_workspace = true
}
