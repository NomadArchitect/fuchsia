// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library zx;

@transport("Syscall")
closed protocol MBO {
    @testonly
    strict Create(struct {
        options uint32;
    }) -> (resource struct {
        out Handle;
    }) error Status;

    @testonly
    strict Write(resource struct {
        handle Handle;
        options uint32;
        @voidptr
        @size32
        bytes vector<byte>:CHANNEL_MAX_MSG_BYTES;
        @release
        @size32
        handles vector<Handle>:CHANNEL_MAX_MSG_HANDLES;
    }) -> () error Status;

    @testonly
    @handle_unchecked
    strict Read(resource struct {
        handle Handle:CHANNEL;
        options uint32;
        @out
        @voidptr
        bytes experimental_pointer<byte>;
        @out
        handles experimental_pointer<Handle>;
        num_bytes uint32;
        num_handles uint32;
    }) -> (resource struct {
        actual_bytes uint32;
        actual_handles uint32;
    }) error Status;
};

@transport("Syscall")
closed protocol Msgqueue {
    @testonly
    strict Create(struct {
        options uint32;
    }) -> (resource struct {
        out Handle;
    }) error Status;

    @testonly
    strict CreateChannel(resource struct {
        msgqueue Handle;
        key uint64;
    }) -> (resource struct {
        out Handle;
    }) error Status;

    // TODO: Add "key" output argument.
    @testonly
    strict Wait(resource struct {
        msgqueue Handle;
        calleesref Handle;
    }) -> () error Status;
};

@transport("Syscall")
closed protocol Calleesref {
    @testonly
    strict Create(struct {
        options uint32;
    }) -> (resource struct {
        out Handle;
    }) error Status;

    @testonly
    strict SendReply(resource struct {
        calleesref Handle;
    }) -> () error Status;
};
