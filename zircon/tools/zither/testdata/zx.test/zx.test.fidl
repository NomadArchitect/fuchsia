// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library zx;

alias Time = uint64;

type Status = enum : int32 {
    OK = 0;
    BAD = 1;
};

@transport("Syscall")
@no_protocol_prefix
protocol Clockfuncs {
    @vdsocall
    ClockGetMonotonic() -> (struct {
        time Time;
    });

    @internal
    ClockGetMonotonicViaKernel() -> (struct {
        time Time;
    });
};

@transport("Syscall")
@no_protocol_prefix
protocol Misc {
    @blocking
    Nanosleep(struct {
        deadline Time;
    }) -> () error Status;
};

@transport("Syscall")
protocol Process {
    @noreturn
    Exit(struct {
        retcode int64;
    });
};

@transport("Syscall")
protocol System {
    @const
    @vdsocall
    GetPageSize() -> (struct {
        size uint32;
    });
};

@transport("Syscall")
protocol Syscall {
    @next
    Next();

    @testonly
    Test0();

    @testonly
    @test_category1
    Test1();

    @testonly
    @test_category2
    Test2();
};
