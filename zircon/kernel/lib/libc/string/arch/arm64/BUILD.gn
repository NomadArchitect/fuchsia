# Copyright 2019 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/toolchain/toolchain_environment.gni")
import("//zircon/kernel/lib/code-patching/code-patching.gni")

cortex_strings_dir = "//zircon/third_party/lib/cortex-strings"
not_needed([ "cortex_strings_dir" ])

source_set("arm64") {
  if (current_os == "win" || toolchain_variant.tags + [ "strict-align" ] -
                             [ "strict-align" ] != toolchain_variant.tags) {
    # This environment can't handled unaligned accesses, which the
    # optimized assembly routines do.
    sources = [
      "//zircon/kernel/lib/libc/string/memcpy.c",
      "//zircon/kernel/lib/libc/string/memset.c",
    ]
    deps = [ "//zircon/kernel/lib/libc:headers" ]
  } else if (toolchain_environment == "kernel") {
    # In the kernel proper, code-patching chooses the implementation.
    deps = [
      ":__unsanitized_memcpy",
      ":__unsanitized_memset",
    ]
  } else {
    sources = [
      "$cortex_strings_dir/no-neon/src/aarch64/memset.S",
      "$cortex_strings_dir/src/aarch64/memcpy.S",
    ]
  }
}

if (toolchain_environment == "kernel") {
  foreach(function,
          [
            "memcpy",
            "memset",
          ]) {
    code_patching_hermetic_stub("__unsanitized_${function}") {
      aliases = [ function ]
      deps = [
        ":${function}-cortex",
        ":${function}-mops",
      ]
    }

    code_patching_hermetic_alternative("${function}-mops") {
      entrypoint = function
      sources = [ "${function}-mops.S" ]
      deps = [ "//zircon/kernel/lib/arch:headers" ]
    }
  }

  code_patching_hermetic_alternative("memcpy-cortex") {
    entrypoint = "memcpy"
    sources = [ "$cortex_strings_dir/src/aarch64/memcpy.S" ]
  }

  code_patching_hermetic_alternative("memset-cortex") {
    entrypoint = "memset"
    sources = [ "$cortex_strings_dir/no-neon/src/aarch64/memset.S" ]
  }
}
