#!/bin/bash
# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#### CATEGORY=Build
### Run experimental Bazel build for Fuchsia platform tree

## usage: fx bazel ...
##
## This is a highly experimental command to run Bazel build commands
## directly from the command-line. Only useful for debugging the platform
## build. Note that currently Bazel is automatically invoked by Ninja
## when `fx build` is invoked.
##
## This runs Bazel in a custom workspace under the Fuchsia build directory,
## use `fx bazel info workspace` to print its path.
##
## This command will fail if you have not run `fx gen` or `fx set` previously.
##
## All arguments are passed to the Bazel binary.

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"/lib/vars.sh || exit $?
fx-config-read

if [[ ! -d "${FUCHSIA_BUILD_DIR}" ]]; then
  fx-error "No Fuchsia build directory, please run \`fx set\` or \`fx gen\`."
fi

# Regenerate Bazel workspace and launcher script if needed.
# Note that this also regenerates the Ninja build plan if necessary.
"${FUCHSIA_DIR}"/build/bazel/scripts/update_workspace.py

# LINT.IfChange
readonly _BASE_DIR="${FUCHSIA_BUILD_DIR}/gen/build/bazel"
readonly _WORKSPACE_DIR="${_BASE_DIR}/workspace"
readonly _OUTPUT_BASE="${_BASE_DIR}/output_base"
readonly _OUTPUT_USER_ROOT="${_BASE_DIR}/output_user_root"
readonly _LOG_DIR="${_BASE_DIR}/logs"
# LINT.ThenChange(/build/bazel/scripts/update_workspace.py)

# Ensure our prebuilt Python3 executable is in the PATH to run repository
# rules that invoke Python programs correctly in containers or jails that
# do not expose the system-installed one.
export PATH=${PREBUILT_PYTHON3_DIR}/bin:${PATH}

# An undocumented, but widely used, environment variable that tells Bazel to
# not auto-detect the host C++ installation. This makes workspace setup faster
# and ensures this can be used on containers where GCC or Clang are not
# installed (Bazel would complain otherwise with an error).
export BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Implement log rotation (up to 3 old files)
# $1: log file name (e.g. "path/to/workspace-events.log")
logrotate3 () {
  local i
  local prev_log="$1.3"
  local cur_log
  for i in "2" "1"; do
    rm -f "${prev_log}"
    cur_log="$1.$i"
    if [[ -f "${cur_log}" ]]; then
      mv "${cur_log}" "${prev_log}"
    fi
    prev_log="${cur_log}"
  done
  cur_log="$1"
  if [[ -f "${cur_log}" ]]; then
    mv "${cur_log}" "${prev_log}"
  fi
}

# Rotate the workspace events log. Note that this file is created
# through an option set in the .bazelrc file, not the command-line below.
mkdir -p "${_LOG_DIR}"
logrotate3 "${_LOG_DIR}/workspace-events.log"

# Setting $USER so `bazel` won't fail in environments with fake UIDs. Even if
# the USER is not actually used. See https://fxbug.dev/112206#c9.
#
# Explanation for flags:
#  --nohome_rc: Ignore $HOME/.bazelrc to enforce hermiticity / reproducibility.
#  --output_base: Ensure the output base is in the Ninja output directory, not under $HOME.
#  --output_user_root: Ensure the output user root is in the Ninja output directory, not under $HOME.
cd "${_WORKSPACE_DIR}" && USER=unused-bazel-build-user "${PREBUILT_BAZEL}" \
      --nohome_rc \
      --output_base="${_OUTPUT_BASE}" \
      --output_user_root="${_OUTPUT_USER_ROOT}" \
      "$@"