#!/bin/bash
# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#### CATEGORY=Build
### re-use a previous build directory set up by `fx set`

## usage: fx use DIR
##    or: fx --dir DIR use
##    or: fx use
##
## Switches further `fx` commands to using a different build directory.
## This only works if `fx --dir DIR set ...` succeeded previously
## (and DIR has not been removed since).  The next `fx build` or other
## such command will now refer to DIR.  The previous build directory is
## left in place, so you can switch back again with `fx use` later.
##
## fx use without arguments will prompt you to choose a build directory.

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"/lib/vars.sh || exit $?

function main {
  local build_dir="$1"

  case "${build_dir}" in
  -h | --help)
    fx-command-help
    return 0
    ;;
  esac

  if [[ -z "${build_dir}" ]]; then
    build_dir="${_FX_BUILD_DIR}"
  fi

  if [[ -z "${build_dir}" ]]; then
    fx-build-dir-if-present
    local possible_build_dirs=()
    local current="${FUCHSIA_BUILD_DIR##"${FUCHSIA_DIR}"/}"
    if [[ -n "${current}" ]]; then
      possible_build_dirs+=("${current} (current)")
    fi

    if [ -d "${FUCHSIA_DIR}/out" ] &&  [[ $(ls -A "${FUCHSIA_DIR}/out") ]]; then
      for d in "${FUCHSIA_DIR}"/out/*; do
        local build_dir="${d##"${FUCHSIA_DIR}"/}"
        if [[
          "${build_dir}" != out/*.zircon &&
          "${build_dir}" != out/*.device &&
          "${build_dir}" != "${current}" &&
          "${build_dir}" != out/*crash.log &&
          "${build_dir}" != out/*.json &&
          "${build_dir}" != out/\_* && # Ignore dirs that start with `_` (e.g. _bazel_rbe_test)
          "${build_dir}" != out/repro\_*\.instructions &&
          "${build_dir}" != out/.*build_lock &&
          "${build_dir}" != out/rust-analyzer # This is a symbolink link to ${FUCHSIA_BUILD_DIR}/rust-analyzer
        ]]; then

          possible_build_dirs+=("${build_dir}")
        fi
      done
    fi

    # check if we have any possible build directories to choose from.
    if [ "${#possible_build_dirs[@]}" -eq 0 ]; then
      fx-error "There are no current build directies. Make sure you have run fx set."
      exit 1
    fi

    chosen_dir="$(fx-choose "${possible_build_dirs[@]}" --select-if-one --header="Select a build dir:")"
    # strip off any trailing spaces and the '(current)' string
    build_dir="${chosen_dir% *\(*}"
  fi

  if [[ -z "${build_dir}" ]]; then
    # This can happen if users close out of the picker without selecting anything
    fx-error "No build directory picked. If you still want to change directories,\nrun this command again and select a directory."
    exit 1
  fi

  if [[ "$build_dir" == /* ]]; then
    local -r full_build_dir="${build_dir}"
  else
    local -r full_build_dir="${FUCHSIA_DIR}/${build_dir}"
  fi

  if [[ -e "${full_build_dir}/args.gn" ]]; then
    fx-change-build-dir "${build_dir}"
    fx-check-default-target
    exit $?
  else
    echo "\"${build_dir}\" is not a valid build dir."
    echo ""
    fx-command-help
    exit 1
  fi
}

main "$@"
