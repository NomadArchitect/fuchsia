{{/*
// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{ define "UnionDeclaration" -}}
class {{ .PythonName }}:
    """
    {{- range .DocComments }}
    {{ . }}
    {{- end }}
    """
    {{- range .PythonMembers }}
    {{ .PythonName }}: {{ .PythonType.PythonName }} | None
    {{- range .DocComments }}
    """
    {{ . }}
    """
    {{- end }}

    @classmethod
    def {{ .PythonName }}_variant(cls, value: {{ .PythonType.PythonName }}, member_name: str="{{ .PythonName }}") -> typing.Self:
        {{- range .DocComments }}
        """
        {{ . }}
        """
        {{- end }}
        res = cls.make_default()
        setattr(res, member_name, value)
        return res

    {{- end }}

    __fidl_kind__ = "union"
    __fidl_type__ = "{{ .PythonName }}"
    __fidl_raw_type__ = "{{ .Name }}"

    def _get_value(self) -> tuple[str | None, typing.Any]:
        {{- range .PythonMembers }}
        if self.{{ .PythonName }} is not None:
            return "{{ .PythonName}}", self.{{ .PythonName }}
        {{- end }}
        return None, None

    def __repr__(self) -> str:
        key, value = self._get_value()
        string = f"{key}={repr(value)}"
        if key is None and value is None:
            string = "None"
        return f"<'{self.__fidl_type__}' object({string})>"

    def __str__(self) -> str:
        key, value = self._get_value()
        string = f"{key}={str(value)}"
        if key is None and value is None:
            string = "None"
        return f"{type(self).__name__}({string})"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        return True \
        {{- range .PythonMembers }}
            and self.{{ .PythonName }} == other.{{ .PythonName }} \
        {{- end }}

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str): # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(self, "{{ .Library }}", "{{ .Name }}")

    @classmethod
    def make_default(cls) -> typing.Self:
        # This steps around setting a default value during the class definition itself
        # because, when imported, the type of each variant could contain a forward reference that
        # cannot be resolved.
        ret = cls()
        {{- range .PythonMembers }}
        setattr(ret, "{{ .PythonName }}", None)
        {{- end }}
        return ret


{{ end }}