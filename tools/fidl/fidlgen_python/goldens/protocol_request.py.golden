# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.protocolrequest"]
add_ir_path(_ir_path)


@dataclass
class ParentGetChildRequestResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    r: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentGetChildRequestResponse"
    __fidl_raw_type__ = "test.protocolrequest/ParentGetChildRequestResponse"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentGetChildRequestResponse",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "r": None,
            }
        )


@dataclass
class ParentGetChildResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    c: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentGetChildResponse"
    __fidl_raw_type__ = "test.protocolrequest/ParentGetChildResponse"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentGetChildResponse",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "c": None,
            }
        )


@dataclass
class ParentTakeChildRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    c: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentTakeChildRequest"
    __fidl_raw_type__ = "test.protocolrequest/ParentTakeChildRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentTakeChildRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "c": None,
            }
        )


@dataclass
class ParentTakeChildRequestRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    r: int | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ParentTakeChildRequestRequest"
    __fidl_raw_type__ = "test.protocolrequest/ParentTakeChildRequestRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.protocolrequest",
            "test.protocolrequest/ParentTakeChildRequestRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "r": None,
            }
        )


class ChildServer(fidl._server.ServerBase):
    __fidl_kind__ = "server"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ChildClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ChildEventHandler(fidl._client.EventHandlerBase):
    __fidl_kind__ = "event_handler"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


ChildMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.protocolrequest/Child"
)


class ParentServer(fidl._server.ServerBase):
    __fidl_kind__ = "server"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ParentClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ParentEventHandler(fidl._client.EventHandlerBase):
    __fidl_kind__ = "event_handler"
    library = "test.protocolrequest"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


ParentMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.protocolrequest/Parent"
)
