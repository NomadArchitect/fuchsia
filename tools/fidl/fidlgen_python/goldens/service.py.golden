# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.service"]
add_ir_path(_ir_path)


class FirstProtocolServer(fidl._server.ServerBase):
    __fidl_kind__ = "server"
    library = "test.service"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class FirstProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.service"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class FirstProtocolEventHandler(fidl._client.EventHandlerBase):
    __fidl_kind__ = "event_handler"
    library = "test.service"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


FirstProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.service/FirstProtocol"
)


class SecondProtocolServer(fidl._server.ServerBase):
    __fidl_kind__ = "server"
    library = "test.service"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class SecondProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.service"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class SecondProtocolEventHandler(fidl._client.EventHandlerBase):
    __fidl_kind__ = "event_handler"
    library = "test.service"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


SecondProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.service/SecondProtocol"
)
