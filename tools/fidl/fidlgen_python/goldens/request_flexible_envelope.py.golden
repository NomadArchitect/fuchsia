# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.requestflexibleenvelope"]
add_ir_path(_ir_path)


@dataclass
class ProtocolRequestFlexibleResponseStrictRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    s: FlexibleFoo | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ProtocolRequestFlexibleResponseStrictRequest"
    __fidl_raw_type__ = "test.requestflexibleenvelope/ProtocolRequestFlexibleResponseStrictRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.requestflexibleenvelope",
            "test.requestflexibleenvelope/ProtocolRequestFlexibleResponseStrictRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "s": None,
            }
        )


@dataclass
class ProtocolRequestFlexibleResponseStrictResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    f: StrictFoo | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ProtocolRequestFlexibleResponseStrictResponse"
    __fidl_raw_type__ = "test.requestflexibleenvelope/ProtocolRequestFlexibleResponseStrictResponse"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.requestflexibleenvelope",
            "test.requestflexibleenvelope/ProtocolRequestFlexibleResponseStrictResponse",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "f": None,
            }
        )


@dataclass
class ProtocolRequestStrictResponseFlexibleRequest:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    s: StrictFoo | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ProtocolRequestStrictResponseFlexibleRequest"
    __fidl_raw_type__ = "test.requestflexibleenvelope/ProtocolRequestStrictResponseFlexibleRequest"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.requestflexibleenvelope",
            "test.requestflexibleenvelope/ProtocolRequestStrictResponseFlexibleRequest",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "s": None,
            }
        )


@dataclass
class ProtocolRequestStrictResponseFlexibleResponse:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    f: FlexibleFoo | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ProtocolRequestStrictResponseFlexibleResponse"
    __fidl_raw_type__ = "test.requestflexibleenvelope/ProtocolRequestStrictResponseFlexibleResponse"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.requestflexibleenvelope",
            "test.requestflexibleenvelope/ProtocolRequestStrictResponseFlexibleResponse",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "f": None,
            }
        )


class FlexibleFoo:
    _s: typing.Optional[str]
    _i: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "FlexibleFoo"
    __fidl_raw_type__ = "test.requestflexibleenvelope/FlexibleFoo"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.s != other.s:
            return False
        if self.i != other.i:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.s:
            variant = f"s={self.s!r}"
        if self.i:
            variant = f"i={self.i!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        s: typing.Optional[str] = None,
        i: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if s is not None:
            self._s = s
            variants.append("s")
            number_of_variants += 1
        if i is not None:
            self._i = i
            variants.append("i")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def s(self) -> str | None:
        return getattr(self, "_s", None)

    @property
    def i(self) -> int | None:
        return getattr(self, "_i", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.requestflexibleenvelope",
            "test.requestflexibleenvelope/FlexibleFoo",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class StrictFoo:
    _s: typing.Optional[str]
    _i: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "StrictFoo"
    __fidl_raw_type__ = "test.requestflexibleenvelope/StrictFoo"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.s != other.s:
            return False
        if self.i != other.i:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.s:
            variant = f"s={self.s!r}"
        if self.i:
            variant = f"i={self.i!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        s: typing.Optional[str] = None,
        i: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if s is not None:
            self._s = s
            variants.append("s")
            number_of_variants += 1
        if i is not None:
            self._i = i
            variants.append("i")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def s(self) -> str | None:
        return getattr(self, "_s", None)

    @property
    def i(self) -> int | None:
        return getattr(self, "_i", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.requestflexibleenvelope",
            "test.requestflexibleenvelope/StrictFoo",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolServer(fidl._server.ServerBase):
    __fidl_kind__ = "server"
    library = "test.requestflexibleenvelope"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.requestflexibleenvelope"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ProtocolEventHandler(fidl._client.EventHandlerBase):
    __fidl_kind__ = "event_handler"
    library = "test.requestflexibleenvelope"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


ProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.requestflexibleenvelope/Protocol"
)
