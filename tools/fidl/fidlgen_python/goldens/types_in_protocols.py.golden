# WARNING: This file is machine generated by fidlgen.

from __future__ import annotations

from dataclasses import dataclass

# TODO(https://fxbug.dev/346628306): Enable type checking here once fidl_codec has stubs
from fidl_codec import add_ir_path, encode_fidl_object  # type: ignore
import sys
import typing
import enum

import fidl

_ir_path = fidl._library.get_fidl_ir_map()["test.typesinprotocols"]
add_ir_path(_ir_path)


@dataclass
class ArrayBasic:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    array_uint8: typing.Sequence[int] | None
    array_uint16: typing.Sequence[int] | None
    array_uint32: typing.Sequence[int] | None
    array_uint64: typing.Sequence[int] | None
    array_int8: typing.Sequence[int] | None
    array_int16: typing.Sequence[int] | None
    array_int32: typing.Sequence[int] | None
    array_int64: typing.Sequence[int] | None
    array_float32: typing.Sequence[float] | None
    array_float64: typing.Sequence[float] | None
    array_string: typing.Sequence[str] | None
    array_opt_string: typing.Sequence[typing.Optional[str]] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ArrayBasic"
    __fidl_raw_type__ = "test.typesinprotocols/ArrayBasic"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/ArrayBasic"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "array_uint8": None,
                "array_uint16": None,
                "array_uint32": None,
                "array_uint64": None,
                "array_int8": None,
                "array_int16": None,
                "array_int32": None,
                "array_int64": None,
                "array_float32": None,
                "array_float64": None,
                "array_string": None,
                "array_opt_string": None,
            }
        )


@dataclass
class ArrayCompound:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    array_bits: typing.Sequence[int] | None
    array_enum: typing.Sequence[int] | None
    array_struct: typing.Sequence[Struct] | None
    array_table: typing.Sequence[Table] | None
    array_union: typing.Sequence[Union] | None
    array_opt_struct: typing.Sequence[typing.Optional[Struct]] | None
    array_opt_union: typing.Sequence[typing.Optional[Union]] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ArrayCompound"
    __fidl_raw_type__ = "test.typesinprotocols/ArrayCompound"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/ArrayCompound"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "array_bits": None,
                "array_enum": None,
                "array_struct": None,
                "array_table": None,
                "array_union": None,
                "array_opt_struct": None,
                "array_opt_union": None,
            }
        )


@dataclass
class ArrayVectorNested:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    array_array_uint8: typing.Sequence[typing.Sequence[int]] | None
    array_vector_uint8: typing.Sequence[typing.Sequence[int]] | None
    vector_array_uint8: typing.Sequence[typing.Sequence[int]] | None
    vector_vector_uint8: typing.Sequence[typing.Sequence[int]] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "ArrayVectorNested"
    __fidl_raw_type__ = "test.typesinprotocols/ArrayVectorNested"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/ArrayVectorNested",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "array_array_uint8": None,
                "array_vector_uint8": None,
                "vector_array_uint8": None,
                "vector_vector_uint8": None,
            }
        )


@dataclass
class Basic:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    uint8: int | None
    uint16: int | None
    uint32: int | None
    uint64: int | None
    int8: int | None
    int16: int | None
    int32: int | None
    int64: int | None
    float32: float | None
    float64: float | None
    string: str | None
    opt_string: typing.Optional[str] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "Basic"
    __fidl_raw_type__ = "test.typesinprotocols/Basic"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/Basic"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "uint8": None,
                "uint16": None,
                "uint32": None,
                "uint64": None,
                "int8": None,
                "int16": None,
                "int32": None,
                "int64": None,
                "float32": None,
                "float64": None,
                "string": None,
                "opt_string": None,
            }
        )


@dataclass
class Compound:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    bits: int | None
    enum: int | None
    struct: Struct | None
    table: Table | None
    union: Union | None
    opt_struct: typing.Optional[Struct] | None
    opt_union: typing.Optional[Union] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "Compound"
    __fidl_raw_type__ = "test.typesinprotocols/Compound"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/Compound"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "bits": None,
                "enum": None,
                "struct": None,
                "table": None,
                "union": None,
                "opt_struct": None,
                "opt_union": None,
            }
        )


@dataclass
class Resource:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    handle: int | None
    vmo: int | None
    client_end: int | None
    server_end: int | None
    struct: ResourceStruct | None
    table: ResourceTable | None
    union: ResourceUnion | None
    opt_handle: typing.Optional[int] | None
    opt_vmo: typing.Optional[int] | None
    opt_client_end: typing.Optional[int] | None
    opt_server_end: typing.Optional[int] | None
    opt_struct: typing.Optional[ResourceStruct] | None
    opt_union: typing.Optional[ResourceUnion] | None
    array_handle: typing.Sequence[int] | None
    array_vmo: typing.Sequence[int] | None
    array_client_end: typing.Sequence[int] | None
    array_server_end: typing.Sequence[int] | None
    array_struct: typing.Sequence[ResourceStruct] | None
    array_table: typing.Sequence[ResourceTable] | None
    array_union: typing.Sequence[ResourceUnion] | None
    vector_handle: typing.Sequence[int] | None
    vector_vmo: typing.Sequence[int] | None
    vector_client_end: typing.Sequence[int] | None
    vector_server_end: typing.Sequence[int] | None
    vector_struct: typing.Sequence[ResourceStruct] | None
    vector_table: typing.Sequence[ResourceTable] | None
    vector_union: typing.Sequence[ResourceUnion] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "Resource"
    __fidl_raw_type__ = "test.typesinprotocols/Resource"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/Resource"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "handle": None,
                "vmo": None,
                "client_end": None,
                "server_end": None,
                "struct": None,
                "table": None,
                "union": None,
                "opt_handle": None,
                "opt_vmo": None,
                "opt_client_end": None,
                "opt_server_end": None,
                "opt_struct": None,
                "opt_union": None,
                "array_handle": None,
                "array_vmo": None,
                "array_client_end": None,
                "array_server_end": None,
                "array_struct": None,
                "array_table": None,
                "array_union": None,
                "vector_handle": None,
                "vector_vmo": None,
                "vector_client_end": None,
                "vector_server_end": None,
                "vector_struct": None,
                "vector_table": None,
                "vector_union": None,
            }
        )


@dataclass
class ResourceStruct:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.

    __fidl_kind__ = "struct"
    __fidl_type__ = "ResourceStruct"
    __fidl_raw_type__ = "test.typesinprotocols/ResourceStruct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/ResourceStruct",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(**{})


@dataclass
class Struct:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.

    __fidl_kind__ = "struct"
    __fidl_type__ = "Struct"
    __fidl_raw_type__ = "test.typesinprotocols/Struct"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/Struct"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(**{})


@dataclass
class VectorBasic:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    vector_uint8: typing.Sequence[int] | None
    vector_uint16: typing.Sequence[int] | None
    vector_uint32: typing.Sequence[int] | None
    vector_uint64: typing.Sequence[int] | None
    vector_int8: typing.Sequence[int] | None
    vector_int16: typing.Sequence[int] | None
    vector_int32: typing.Sequence[int] | None
    vector_int64: typing.Sequence[int] | None
    vector_float32: typing.Sequence[float] | None
    vector_float64: typing.Sequence[float] | None
    vector_string: typing.Sequence[str] | None
    vector_opt_string: typing.Sequence[typing.Optional[str]] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "VectorBasic"
    __fidl_raw_type__ = "test.typesinprotocols/VectorBasic"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/VectorBasic"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "vector_uint8": None,
                "vector_uint16": None,
                "vector_uint32": None,
                "vector_uint64": None,
                "vector_int8": None,
                "vector_int16": None,
                "vector_int32": None,
                "vector_int64": None,
                "vector_float32": None,
                "vector_float64": None,
                "vector_string": None,
                "vector_opt_string": None,
            }
        )


@dataclass
class VectorCompound:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    vector_bits: typing.Sequence[int] | None
    vector_enum: typing.Sequence[int] | None
    vector_struct: typing.Sequence[Struct] | None
    vector_table: typing.Sequence[Table] | None
    vector_union: typing.Sequence[Union] | None
    vector_opt_struct: typing.Sequence[typing.Optional[Struct]] | None
    vector_opt_union: typing.Sequence[typing.Optional[Union]] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "VectorCompound"
    __fidl_raw_type__ = "test.typesinprotocols/VectorCompound"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/VectorCompound",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "vector_bits": None,
                "vector_enum": None,
                "vector_struct": None,
                "vector_table": None,
                "vector_union": None,
                "vector_opt_struct": None,
                "vector_opt_union": None,
            }
        )


@dataclass
class VectorOptional:
    # TODO(https://fxbug.dev/394421154): The None variant of each type is a consequence
    # of needing to support creation of a "default object" before decoding.
    opt_vector_uint8: typing.Optional[typing.Sequence[int]] | None
    opt_vector_string: typing.Optional[typing.Sequence[str]] | None
    opt_vector_struct: typing.Optional[typing.Sequence[Struct]] | None
    opt_vector_opt_struct: typing.Optional[
        typing.Sequence[typing.Optional[Struct]]
    ] | None

    __fidl_kind__ = "struct"
    __fidl_type__ = "VectorOptional"
    __fidl_raw_type__ = "test.typesinprotocols/VectorOptional"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/VectorOptional",
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(
            **{
                "opt_vector_uint8": None,
                "opt_vector_string": None,
                "opt_vector_struct": None,
                "opt_vector_opt_struct": None,
            }
        )


@dataclass
class ResourceTable:
    __fidl_kind__ = "table"
    __fidl_type__ = "ResourceTable"
    __fidl_raw_type__ = "test.typesinprotocols/ResourceTable"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/ResourceTable"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


@dataclass
class Table:
    __fidl_kind__ = "table"
    __fidl_type__ = "Table"
    __fidl_raw_type__ = "test.typesinprotocols/Table"

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/Table"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls()


class ProtocolErrorArrayBasicResult:
    _response: typing.Optional[ArrayBasic]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorArrayBasicResult"
    __fidl_raw_type__ = "test.typesinprotocols/Protocol_ErrorArrayBasic_Result"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[ArrayBasic] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> ArrayBasic | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorArrayBasic_Result",
        )

    def unwrap(self) -> ArrayBasic:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorArrayCompoundResult:
    _response: typing.Optional[ArrayCompound]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorArrayCompoundResult"
    __fidl_raw_type__ = (
        "test.typesinprotocols/Protocol_ErrorArrayCompound_Result"
    )

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[ArrayCompound] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> ArrayCompound | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorArrayCompound_Result",
        )

    def unwrap(self) -> ArrayCompound:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorArrayVectorNestedResult:
    _response: typing.Optional[ArrayVectorNested]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorArrayVectorNestedResult"
    __fidl_raw_type__ = (
        "test.typesinprotocols/Protocol_ErrorArrayVectorNested_Result"
    )

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[ArrayVectorNested] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> ArrayVectorNested | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorArrayVectorNested_Result",
        )

    def unwrap(self) -> ArrayVectorNested:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorBasicResult:
    _response: typing.Optional[Basic]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorBasicResult"
    __fidl_raw_type__ = "test.typesinprotocols/Protocol_ErrorBasic_Result"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[Basic] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> Basic | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorBasic_Result",
        )

    def unwrap(self) -> Basic:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorCompoundResult:
    _response: typing.Optional[Compound]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorCompoundResult"
    __fidl_raw_type__ = "test.typesinprotocols/Protocol_ErrorCompound_Result"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[Compound] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> Compound | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorCompound_Result",
        )

    def unwrap(self) -> Compound:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorResourceResult:
    _response: typing.Optional[Resource]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorResourceResult"
    __fidl_raw_type__ = "test.typesinprotocols/Protocol_ErrorResource_Result"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[Resource] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> Resource | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorResource_Result",
        )

    def unwrap(self) -> Resource:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorVectorBasicResult:
    _response: typing.Optional[VectorBasic]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorVectorBasicResult"
    __fidl_raw_type__ = "test.typesinprotocols/Protocol_ErrorVectorBasic_Result"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[VectorBasic] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> VectorBasic | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorVectorBasic_Result",
        )

    def unwrap(self) -> VectorBasic:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorVectorCompoundResult:
    _response: typing.Optional[VectorCompound]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorVectorCompoundResult"
    __fidl_raw_type__ = (
        "test.typesinprotocols/Protocol_ErrorVectorCompound_Result"
    )

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[VectorCompound] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> VectorCompound | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorVectorCompound_Result",
        )

    def unwrap(self) -> VectorCompound:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ProtocolErrorVectorOptionalResult:
    _response: typing.Optional[VectorOptional]
    _err: typing.Optional[int]

    __fidl_kind__ = "union"
    __fidl_type__ = "ProtocolErrorVectorOptionalResult"
    __fidl_raw_type__ = (
        "test.typesinprotocols/Protocol_ErrorVectorOptional_Result"
    )

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.response != other.response:
            return False
        if self.err != other.err:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.response:
            variant = f"response={self.response!r}"
        if self.err:
            variant = f"err={self.err!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        response: typing.Optional[VectorOptional] = None,
        err: typing.Optional[int] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if response is not None:
            self._response = response
            variants.append("response")
            number_of_variants += 1
        if err is not None:
            self._err = err
            variants.append("err")
            number_of_variants += 1
        if number_of_variants > 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def response(self) -> VectorOptional | None:
        return getattr(self, "_response", None)

    @property
    def err(self) -> int | None:
        return getattr(self, "_err", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self,
            "test.typesinprotocols",
            "test.typesinprotocols/Protocol_ErrorVectorOptional_Result",
        )

    def unwrap(self) -> VectorOptional:
        """Returns the response if result does not contain an error. Otherwise, raises an exception."""
        try:
            if (
                hasattr(self, "_framework_err")
                and self._framework_err is not None
            ):
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} framework error {self._framework_err}"
                )
        except AttributeError:
            pass
        try:
            if hasattr(self, "_err") and self._err is not None:
                raise RuntimeError(
                    f"{self.__fidl_raw_type__} error {self._err}"
                )
        except AttributeError:
            pass

        assert (
            self._response is not None
        ), f"Failed to unwrap {self.__fidl_raw_type__}. Result does not contain an error or response."
        return self._response

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class ResourceUnion:
    _b: typing.Optional[bool]

    __fidl_kind__ = "union"
    __fidl_type__ = "ResourceUnion"
    __fidl_raw_type__ = "test.typesinprotocols/ResourceUnion"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.b != other.b:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.b:
            variant = f"b={self.b!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        b: typing.Optional[bool] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if b is not None:
            self._b = b
            variants.append("b")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def b(self) -> bool | None:
        return getattr(self, "_b", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/ResourceUnion"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


class Union:
    _b: typing.Optional[bool]

    __fidl_kind__ = "union"
    __fidl_type__ = "Union"
    __fidl_raw_type__ = "test.typesinprotocols/Union"

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, type(self)):
            return False
        if self.b != other.b:
            return False
        return True

    def __repr__(self) -> str:
        """Returns the union repr in the format <'foo.bar.baz/FooUnion' object({value})>

        If {value} is not set, will write None."""
        variant = ""
        if self.b:
            variant = f"b={self.b!r}"
        return f"<'{self.__fidl_type__}' object({variant})>"

    def __init__(
        self,
        b: typing.Optional[bool] = None,
        _empty: typing.Optional[tuple[()]] = None,
    ):
        object.__init__(self)
        if _empty is not None:
            return

        number_of_variants = 0
        variants = []

        if b is not None:
            self._b = b
            variants.append("b")
            number_of_variants += 1
        if number_of_variants != 1:
            raise TypeError(
                f"Exactly one variant must be specified for {self.__fidl_raw_type__}: {variants}"
            )

    @property
    def b(self) -> bool | None:
        return getattr(self, "_b", None)

    # TODO(https://fxbug.dev/394421154): We should probably remove this method when we
    # start making breaking changes.
    def __getitem__(self, item: str):  # type: ignore
        if not isinstance(item, str):
            raise TypeError("Subscripted item must be a string")
        return getattr(self, item)

    # TODO(https://fxbug.dev/394421154): We should probably return a more readable type.
    def encode(self) -> tuple[bytes, list[tuple[int, int, int, int, int]]]:
        return encode_fidl_object(
            self, "test.typesinprotocols", "test.typesinprotocols/Union"
        )

    @classmethod
    def make_default(cls) -> typing.Self:
        return cls(_empty=())


Enum = enum.IntEnum(
    "Enum",
    {
        "__fidl_kind__": "enum",
        "__fidl_type__": "Enum",
        "__fidl_raw_type__": "test.typesinprotocols/Enum",
        "__strict__": False,
        "VAL": 1,
        "EMPTY__": 0,
        "make_default": classmethod(lambda cls: cls(0)),
    },
)


Bits = enum.IntFlag(
    "Bits",
    {
        "__fidl_kind__": "bits",
        "__fidl_type__": "Bits",
        "__fidl_raw_type__": "test.typesinprotocols/Bits",
        "__strict__": False,
        "VAL": 1,
        "make_default": classmethod(lambda cls: cls(value=0)),
    },
)


class ProtocolServer(fidl._server.ServerBase):
    __fidl_kind__ = "server"
    library = "test.typesinprotocols"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ProtocolClient(fidl._client.FidlClient):
    __fidl_kind__ = "client"
    library = "test.typesinprotocols"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


class ProtocolEventHandler(fidl._client.EventHandlerBase):
    __fidl_kind__ = "event_handler"
    library = "test.typesinprotocols"
    method_map: typing.Dict[int, typing.Callable[..., typing.Any]] = {}


ProtocolMarker = fidl._library.ProtocolMarker(
    "(nondiscoverable) test.typesinprotocols/Protocol"
)
