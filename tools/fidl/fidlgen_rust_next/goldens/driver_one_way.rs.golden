// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct Payload {
    pub value: u32,
}

impl ::fidl::Encodable for Payload {
    type Encoded<'buf> = WirePayload;
}

impl<___E> ::fidl::Encode<___E> for Payload
where
    u32: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                value,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.value, encoder, value)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<Payload> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePayload>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<Payload>
where
    ___E: ::fidl::Encoder + ?Sized,
    Payload: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePayload> for Payload {
    fn take_from(from: &mut WirePayload) -> Self {
        Self { value: ::fidl::TakeFrom::take_from(&mut from.value) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePayload {
    pub value: ::fidl::u32_le,
}

unsafe impl<___D> ::fidl::Decode<___D> for WirePayload
where
    ___D: ?Sized,

    ::fidl::u32_le: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut value,
            } = slot;
        }
        ::fidl::Decode::decode(value.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct OneWaySendRequest {
    pub payload: crate::Payload,
}

impl ::fidl::Encodable for OneWaySendRequest {
    type Encoded<'buf> = WireOneWaySendRequest;
}

impl<___E> ::fidl::Encode<___E> for OneWaySendRequest
where
    crate::Payload: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                payload,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.payload, encoder, payload)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<OneWaySendRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireOneWaySendRequest>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<OneWaySendRequest>
where
    ___E: ::fidl::Encoder + ?Sized,
    OneWaySendRequest: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireOneWaySendRequest> for OneWaySendRequest {
    fn take_from(from: &mut WireOneWaySendRequest) -> Self {
        Self { payload: ::fidl::TakeFrom::take_from(&mut from.payload) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireOneWaySendRequest {
    pub payload: crate::WirePayload,
}

unsafe impl<___D> ::fidl::Decode<___D> for WireOneWaySendRequest
where
    ___D: ?Sized,

    crate::WirePayload: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut payload,
            } = slot;
        }
        ::fidl::Decode::decode(payload.as_mut(), decoder)?;
        Ok(())
    }
}
