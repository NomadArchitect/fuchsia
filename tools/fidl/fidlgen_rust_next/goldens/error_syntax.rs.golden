// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    pub s: String,
}

impl ::fidl::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    type Encoded<'buf> = WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>;
}

impl<___E> ::fidl::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    String: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                s,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.s, encoder, s)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
    type EncodedOption<'buf> =
        ::fidl::WireBox<'buf, WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
where
    ___E: ::fidl::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailRequest: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>>
    for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
{
    fn take_from(from: &mut WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>) -> Self {
        Self { s: ::fidl::TakeFrom::take_from(&mut from.s) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf> {
    pub s: ::fidl::WireString<'buf>,
}

unsafe impl<'buf, ___D> ::fidl::Decode<___D>
    for WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>
where
    ___D: ?Sized,

    ::fidl::WireString<'buf>: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut s,
            } = slot;
        }
        ::fidl::Decode::decode(s.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ExampleUseOfErrorSyntax_CallWhichMayFail_Response {
    pub value: i64,
}

impl ::fidl::Encodable for ExampleUseOfErrorSyntax_CallWhichMayFail_Response {
    type Encoded<'buf> = WireExampleUseOfErrorSyntax_CallWhichMayFail_Response;
}

impl<___E> ::fidl::Encode<___E> for ExampleUseOfErrorSyntax_CallWhichMayFail_Response
where
    i64: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                value,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.value, encoder, value)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<ExampleUseOfErrorSyntax_CallWhichMayFail_Response> {
    type EncodedOption<'buf> =
        ::fidl::WireBox<'buf, WireExampleUseOfErrorSyntax_CallWhichMayFail_Response>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
where
    ___E: ::fidl::Encoder + ?Sized,
    ExampleUseOfErrorSyntax_CallWhichMayFail_Response: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    for ExampleUseOfErrorSyntax_CallWhichMayFail_Response
{
    fn take_from(from: &mut WireExampleUseOfErrorSyntax_CallWhichMayFail_Response) -> Self {
        Self { value: ::fidl::TakeFrom::take_from(&mut from.value) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntax_CallWhichMayFail_Response {
    pub value: ::fidl::i64_le,
}

unsafe impl<___D> ::fidl::Decode<___D> for WireExampleUseOfErrorSyntax_CallWhichMayFail_Response
where
    ___D: ?Sized,

    ::fidl::i64_le: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut value,
            } = slot;
        }
        ::fidl::Decode::decode(value.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]

pub enum ExampleUseOfErrorSyntax_CallWhichMayFail_Result {
    Response(crate::ExampleUseOfErrorSyntax_CallWhichMayFail_Response),
    Err(u32),
}

impl ::fidl::Encodable for ExampleUseOfErrorSyntax_CallWhichMayFail_Result {
    type Encoded<'buf> = WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>;
}

impl<___E> ::fidl::Encode<___E> for ExampleUseOfErrorSyntax_CallWhichMayFail_Result
where
    ___E: ::fidl::Encoder + ?Sized,

    crate::ExampleUseOfErrorSyntax_CallWhichMayFail_Response: ::fidl::Encode<___E>,
    u32: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge!(let WireExampleUseOfErrorSyntax_CallWhichMayFail_Result { raw } = slot);

        match self {
            Self::Response(value) => ::fidl::RawWireUnion::encode_as::<
                ___E,
                crate::ExampleUseOfErrorSyntax_CallWhichMayFail_Response,
            >(value, 1, encoder, raw)?,
            Self::Err(value) => {
                ::fidl::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<ExampleUseOfErrorSyntax_CallWhichMayFail_Result> {
    type EncodedOption<'buf> = WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<ExampleUseOfErrorSyntax_CallWhichMayFail_Result>
where
    ___E: ::fidl::Encoder + ?Sized,
    ExampleUseOfErrorSyntax_CallWhichMayFail_Result: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge!(let WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>>
    for ExampleUseOfErrorSyntax_CallWhichMayFail_Result
{
    fn take_from(from: &mut WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>>
    for Option<Box<ExampleUseOfErrorSyntax_CallWhichMayFail_Result>>
{
    fn take_from(
        from: &mut WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>,
    ) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultRef<'buf> {
    Response(&'buf crate::WireExampleUseOfErrorSyntax_CallWhichMayFail_Response),
    Err(&'buf ::fidl::u32_le),
}

pub enum WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultMut<'buf> {
    Response(&'buf mut crate::WireExampleUseOfErrorSyntax_CallWhichMayFail_Response),
    Err(&'buf mut ::fidl::u32_le),
}

impl WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'_> {
    pub fn as_ref(&self) -> WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultRef<'_> {
        match self.raw.ordinal() {
            1 => WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultRef::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultRef::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultMut<'_> {
        match self.raw.ordinal() {
            1 => WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultMut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => WireExampleUseOfErrorSyntax_CallWhichMayFail_ResultMut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl::Decode<___D>
    for WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>
where
    ___D: ::fidl::Decoder<'buf> + ?Sized,

    crate::WireExampleUseOfErrorSyntax_CallWhichMayFail_Response: ::fidl::Decode<___D>,
    ::fidl::u32_le: ::fidl::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<
                ___D,
                crate::WireExampleUseOfErrorSyntax_CallWhichMayFail_Response,
            >(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<___D, ::fidl::u32_le>(raw, decoder)?,

            ord => return Err(fidl::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<
crate::WireExampleUseOfErrorSyntax_CallWhichMayFail_Response>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl::u32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(
        &mut self,
    ) -> Option<&mut WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>> {
        if self.is_some() {
            Some(WireExampleUseOfErrorSyntax_CallWhichMayFail_Result {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl::Decode<___D>
    for WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>
where
    ___D: ::fidl::Decoder<'buf> + ?Sized,

    crate::WireExampleUseOfErrorSyntax_CallWhichMayFail_Response: ::fidl::Decode<___D>,
    ::fidl::u32_le: ::fidl::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<
                ___D,
                crate::WireExampleUseOfErrorSyntax_CallWhichMayFail_Response,
            >(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<___D, ::fidl::u32_le>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug
    for WireOptionalExampleUseOfErrorSyntax_CallWhichMayFail_Result<'buf>
{
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}
