// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct Empty {}

impl ::fidl::Encodable for Empty {
    type Encoded<'buf> = WireEmpty;
}

impl<___E> ::fidl::Encode<___E> for Empty {
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
            } = slot;
        }

        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<Empty> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmpty>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<Empty>
where
    ___E: ::fidl::Encoder + ?Sized,
    Empty: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmpty> for Empty {
    fn take_from(from: &mut WireEmpty) -> Self {
        Self {}
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmpty {}

unsafe impl<___D> ::fidl::Decode<___D> for WireEmpty
where
    ___D: ?Sized,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
            } = slot;
        }

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendRequest {
    pub e: crate::Empty,
}

impl ::fidl::Encodable for EmptyProtocolSendRequest {
    type Encoded<'buf> = WireEmptyProtocolSendRequest;
}

impl<___E> ::fidl::Encode<___E> for EmptyProtocolSendRequest
where
    crate::Empty: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<EmptyProtocolSendRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolSendRequest>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<EmptyProtocolSendRequest>
where
    ___E: ::fidl::Encoder + ?Sized,
    EmptyProtocolSendRequest: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolSendRequest> for EmptyProtocolSendRequest {
    fn take_from(from: &mut WireEmptyProtocolSendRequest) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl::Decode<___D> for WireEmptyProtocolSendRequest
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl::Encodable for EmptyProtocolReceiveRequest {
    type Encoded<'buf> = WireEmptyProtocolReceiveRequest;
}

impl<___E> ::fidl::Encode<___E> for EmptyProtocolReceiveRequest
where
    crate::Empty: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<EmptyProtocolReceiveRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolReceiveRequest>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<EmptyProtocolReceiveRequest>
where
    ___E: ::fidl::Encoder + ?Sized,
    EmptyProtocolReceiveRequest: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolReceiveRequest> for EmptyProtocolReceiveRequest {
    fn take_from(from: &mut WireEmptyProtocolReceiveRequest) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl::Decode<___D> for WireEmptyProtocolReceiveRequest
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendAndReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl::Encodable for EmptyProtocolSendAndReceiveRequest {
    type Encoded<'buf> = WireEmptyProtocolSendAndReceiveRequest;
}

impl<___E> ::fidl::Encode<___E> for EmptyProtocolSendAndReceiveRequest
where
    crate::Empty: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<EmptyProtocolSendAndReceiveRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolSendAndReceiveRequest>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<EmptyProtocolSendAndReceiveRequest>
where
    ___E: ::fidl::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveRequest: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolSendAndReceiveRequest>
    for EmptyProtocolSendAndReceiveRequest
{
    fn take_from(from: &mut WireEmptyProtocolSendAndReceiveRequest) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl::Decode<___D> for WireEmptyProtocolSendAndReceiveRequest
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendAndReceiveResponse {
    pub e: crate::Empty,
}

impl ::fidl::Encodable for EmptyProtocolSendAndReceiveResponse {
    type Encoded<'buf> = WireEmptyProtocolSendAndReceiveResponse;
}

impl<___E> ::fidl::Encode<___E> for EmptyProtocolSendAndReceiveResponse
where
    crate::Empty: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<EmptyProtocolSendAndReceiveResponse> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolSendAndReceiveResponse>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<EmptyProtocolSendAndReceiveResponse>
where
    ___E: ::fidl::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveResponse: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolSendAndReceiveResponse>
    for EmptyProtocolSendAndReceiveResponse
{
    fn take_from(from: &mut WireEmptyProtocolSendAndReceiveResponse) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveResponse {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl::Decode<___D> for WireEmptyProtocolSendAndReceiveResponse
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}
