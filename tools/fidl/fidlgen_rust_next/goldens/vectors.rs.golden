// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct ExampleUseOfVectors {
    pub vector_of_uint8: Vec<u8>,
    pub vector_of_vector_of_bool: Vec<Vec<bool>>,
}

impl ::fidl::Encodable for ExampleUseOfVectors {
    type Encoded<'buf> = WireExampleUseOfVectors<'buf>;
}

impl<___E> ::fidl::Encode<___E> for ExampleUseOfVectors
where
    Vec<u8>: ::fidl::Encode<___E>,
    Vec<Vec<bool>>: ::fidl::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        ::fidl::munge! {
            let Self::Encoded {
                vector_of_uint8,
                vector_of_vector_of_bool,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.vector_of_uint8, encoder, vector_of_uint8)?;
        ::fidl::Encode::encode(
            &mut self.vector_of_vector_of_bool,
            encoder,
            vector_of_vector_of_bool,
        )?;
        Ok(())
    }
}

impl ::fidl::EncodableOption for Box<ExampleUseOfVectors> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireExampleUseOfVectors<'buf>>;
}

impl<___E> ::fidl::EncodeOption<___E> for Box<ExampleUseOfVectors>
where
    ___E: ::fidl::Encoder + ?Sized,
    ExampleUseOfVectors: ::fidl::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::EncodeError> {
        if let Some(inner) = this {
            ::fidl::EncoderExt::encode(encoder, inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireExampleUseOfVectors<'buf>> for ExampleUseOfVectors {
    fn take_from(from: &mut WireExampleUseOfVectors<'buf>) -> Self {
        Self {
            vector_of_uint8: ::fidl::TakeFrom::take_from(&mut from.vector_of_uint8),
            vector_of_vector_of_bool: ::fidl::TakeFrom::take_from(
                &mut from.vector_of_vector_of_bool,
            ),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireExampleUseOfVectors<'buf> {
    pub vector_of_uint8: ::fidl::WireVector<'buf, u8>,
    pub vector_of_vector_of_bool: ::fidl::WireVector<'buf, ::fidl::WireVector<'buf, bool>>,
}

unsafe impl<'buf, ___D> ::fidl::Decode<___D> for WireExampleUseOfVectors<'buf>
where
    ___D: ?Sized,

    ::fidl::WireVector<'buf, u8>: ::fidl::Decode<___D>,
    ::fidl::WireVector<'buf, ::fidl::WireVector<'buf, bool>>: ::fidl::Decode<___D>,
{
    fn decode(slot: ::fidl::Slot<'_, Self>, decoder: &mut ___D) -> Result<(), ::fidl::DecodeError> {
        ::fidl::munge! {
            let Self {
                mut vector_of_uint8,
                mut vector_of_vector_of_bool,
            } = slot;
        }
        ::fidl::Decode::decode(vector_of_uint8.as_mut(), decoder)?;
        ::fidl::Decode::decode(vector_of_vector_of_bool.as_mut(), decoder)?;
        Ok(())
    }
}
